* 问题汇总
** TODO 贝联平台无法获取用户在线数据
** TODO <2016-04-15 Fri> 贝联 iphone 无法自动弹 portal
- 抓包分析
** TODO 贝联版本添加多网口的支持
** TODO 贝联 git 分支出版本
** TODO 贝联流控数据错误
** 贝联 arp 表更新
** TODO 连连 portal 问题
** TODO 连连 vpn 分流
- nf_portal 针对域名打 mark4
- add route table
#+BEGIN_SRC shell
"200 outwall" >> etciproute2rt_tables
#+END_SRC
- ip route
#+BEGIN_SRC shell
#!/bin/sh
ip route add 8.8.8.8 dev $TUNDEV
ip route add default dev $TUNDEV table outwall
ip rule add fwmark table outwall
#+END_SRC
#+BEGIN_EXAMPLE
公司内网要求 192.168.0.100 以内的使用 10.0.0.1 网关上网（电信），其他 IP 使用 20.0.0.1（网通）上网。

首先要在网关服务器上添加一个默认路由，当然这个指向是绝大多数的 IP 的出口网关。

ip route add default gw 20.0.0.1

之后通过 ip route 添加一个路由表

ip route add table 3 via 10.0.0.1 dev ethX (ethx 是 10.0.0.1 所在的网卡,3 是路由表的编号)

之后添加 ip  rule 规则

ip rule add fwmark 3  table 3（fwmark 3 是标记，table 3 是路由表 3 上边。 意思就是凡事标记了 3 的数据使用 table3 路由表）

之后使用 iptables 给相应的数据打上标记

iptables -A PREROUTING -t mangle -i eth0 -s 192.168.0.1 -192.168.0.100 -j MARK --set-mark 3

因为 mangle 的处理是优先于 nat 和 fiter 表的，所以相依数据包到达之后先打上标记，之后在通过 ip rule 规则，对应的数据包使用相应的路由表进行路由，最后读取路由表信息，将数据包送出网关。
#+END_EXAMPLE

实现
#+BEGIN_SRC shell
pon greenvpn
ip route add 8.8.8.8 dev ppp10
pactl white_list ip add 8.8.8.8
echo "200 outwall" >> etciproute2rt_tables
ip route add table outwall via 10.0.0.4 dev ppp10
ip rule add fwmark 4 table outwall
iptables -t nat -A POSTROUTING -o ppp10 -j MASQUERADE
pactl must_redirect_list url add apple.com 4
#+END_SRC

#+BEGIN_SRC c
system("sysctl -w net.ipv4.conf.default.rp_filter=0");
system("sysctl -w net.ipv4.conf.eth0.rp_filter=0");
system("sysctl -w net.ipv4.conf.eth2.rp_filter=0");
system("sysctl -w net.ipv4.conf.eth3.rp_filter=0");
system("sysctl -w net.ipv4.conf.ppp0.rp_filter=0");
system("sysctl -w net.ipv4.conf.ppp2.rp_filter=0");
system("sysctl -w net.ipv4.conf.ppp3.rp_filter=0");
#+END_SRC
** TODO 连连 ssh key 支持
** TODO 连连 php 脚本支持 redirect url
** TODO 连连中广视频业务
** TODO 连连删除文件功能失效
** 连连 3x3 的版本
- ta55
#+BEGIN_EXAMPLE
mtd0: 00040000 00010000 "u-boot" 
mtd1: 00010000 00010000 "u-boot-env" 
mtd2: 00100000 00010000 "config" 
mtd3: 00160000 00010000 "uImage" 
mtd4: 00500000 00010000 "squashfs1" 
mtd5: 00500000 00010000 "squashfs2" 
mtd6: 00010000 00010000 "nvram" 
mtd7: 00010000 00010000 "nvram-bak" 
mtd8: 00320000 00010000 "reserved" 
mtd9: 00010000 00010000 "ART" 
#+END_EXAMPLE
- ta58
#+BEGIN_EXAMPLE
mtd0: 00040000 00010000 "uboot" 
mtd1: 00010000 00010000 "uboot.env" 
mtd2: 00170000 00010000 "kernel" 
mtd3: 005f0000 00010000 "rootfs" 
mtd4: 005f0000 00010000 "rootfs.bak" 
mtd5: 001f0000 00010000 "rootfs_data" 
mtd6: 00010000 00010000 "nvram" 
mtd7: 00010000 00010000 "nvram.bak" 
mtd8: 00020000 00010000 "factory.data" 
mtd9: 00010000 00010000 "factory.nvram" 
mtd10: 00010000 00010000 "factory.nvram.bak" 
mtd11: 00010000 00010000 "art" 
mtd12: 00760000 00010000 "firmware" 
#+END_EXAMPLE
** 连连文档发布
